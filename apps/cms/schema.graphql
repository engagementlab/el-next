# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type About {
  id: ID!
  name: String
  key: String
  intro: About_intro_Document
  headingImage: CloudinaryImage_File
  headingImageAltText: String
  headingImageCaption: String
  content: About_content_Document
}

type About_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicId: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type About_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutWhereUniqueInput {
  id: ID
  name: String
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  headingImageAltText: StringFilter
  headingImageCaption: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AboutOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  headingImageAltText: OrderDirection
  headingImageCaption: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AboutUpdateInput {
  name: String
  key: String
  intro: JSON
  headingImage: Upload
  headingImageAltText: String
  headingImageCaption: String
  content: JSON
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AboutUpdateArgs {
  where: AboutWhereUniqueInput!
  data: AboutUpdateInput!
}

input AboutCreateInput {
  name: String
  key: String
  intro: JSON
  headingImage: Upload
  headingImageAltText: String
  headingImageCaption: String
  content: JSON
}

type Event {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [EventFlagType!]
  initiatives: [EventInitiativeType!]
  thumbnail: CloudinaryImage_File
  thumbAltText: String
  summary: String
  eventDate: DateTime
  registrationLink: String
  address: String
  blurb: Event_blurb_Document
  content: Event_content_Document
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum EventFlagType {
  home
  section
}

enum EventInitiativeType {
  gunviolence
  climate
}

type Event_blurb_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Event_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereUniqueInput {
  id: ID
  key: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  thumbAltText: StringFilter
  summary: StringFilter
  eventDate: DateTimeFilter
  registrationLink: StringFilter
  address: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  thumbAltText: OrderDirection
  summary: OrderDirection
  eventDate: OrderDirection
  registrationLink: OrderDirection
  address: OrderDirection
}

input EventUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [EventFlagType!]
  initiatives: [EventInitiativeType!]
  thumbnail: Upload
  thumbAltText: String
  summary: String
  eventDate: DateTime
  registrationLink: String
  address: String
  blurb: JSON
  content: JSON
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [EventFlagType!]
  initiatives: [EventInitiativeType!]
  thumbnail: Upload
  thumbAltText: String
  summary: String
  eventDate: DateTime
  registrationLink: String
  address: String
  blurb: JSON
  content: JSON
}

type Filter {
  id: ID!
  name: String
  key: String
  enabled: Boolean
  studioProjects(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  studioProjectsCount(where: StudioProjectWhereInput! = {}): Int
  researchProjects(where: ResearchProjectWhereInput! = {}, orderBy: [ResearchProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearchProjectWhereUniqueInput): [ResearchProject!]
  researchProjectsCount(where: ResearchProjectWhereInput! = {}): Int
}

input FilterWhereUniqueInput {
  id: ID
}

input FilterWhereInput {
  AND: [FilterWhereInput!]
  OR: [FilterWhereInput!]
  NOT: [FilterWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  enabled: BooleanFilter
  studioProjects: StudioProjectManyRelationFilter
  researchProjects: ResearchProjectManyRelationFilter
}

input StudioProjectManyRelationFilter {
  every: StudioProjectWhereInput
  some: StudioProjectWhereInput
  none: StudioProjectWhereInput
}

input ResearchProjectManyRelationFilter {
  every: ResearchProjectWhereInput
  some: ResearchProjectWhereInput
  none: ResearchProjectWhereInput
}

input FilterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  enabled: OrderDirection
}

input FilterUpdateInput {
  name: String
  key: String
  enabled: Boolean
  studioProjects: StudioProjectRelateToManyForUpdateInput
  researchProjects: ResearchProjectRelateToManyForUpdateInput
}

input StudioProjectRelateToManyForUpdateInput {
  disconnect: [StudioProjectWhereUniqueInput!]
  set: [StudioProjectWhereUniqueInput!]
  create: [StudioProjectCreateInput!]
  connect: [StudioProjectWhereUniqueInput!]
}

input ResearchProjectRelateToManyForUpdateInput {
  disconnect: [ResearchProjectWhereUniqueInput!]
  set: [ResearchProjectWhereUniqueInput!]
  create: [ResearchProjectCreateInput!]
  connect: [ResearchProjectWhereUniqueInput!]
}

input FilterUpdateArgs {
  where: FilterWhereUniqueInput!
  data: FilterUpdateInput!
}

input FilterCreateInput {
  name: String
  key: String
  enabled: Boolean
  studioProjects: StudioProjectRelateToManyForCreateInput
  researchProjects: ResearchProjectRelateToManyForCreateInput
}

input StudioProjectRelateToManyForCreateInput {
  create: [StudioProjectCreateInput!]
  connect: [StudioProjectWhereUniqueInput!]
}

input ResearchProjectRelateToManyForCreateInput {
  create: [ResearchProjectCreateInput!]
  connect: [ResearchProjectWhereUniqueInput!]
}

type Graduate {
  id: ID!
  name: String
  intro: Graduate_intro_Document
  introImage: CloudinaryImage_File
  introImageAltText: String
  introImageCaption: String
  mediaDesign: Graduate_mediaDesign_Document
  symposium: Graduate_symposium_Document
  salzburg: Graduate_salzburg_Document
  alumniSpotlight(where: NewsItemWhereInput! = {}, orderBy: [NewsItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsItemWhereUniqueInput): [NewsItem!]
  alumniSpotlightCount(where: NewsItemWhereInput! = {}): Int
}

type Graduate_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Graduate_mediaDesign_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Graduate_symposium_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Graduate_salzburg_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input GraduateWhereUniqueInput {
  id: ID
  name: String
}

input GraduateWhereInput {
  AND: [GraduateWhereInput!]
  OR: [GraduateWhereInput!]
  NOT: [GraduateWhereInput!]
  id: IDFilter
  name: StringFilter
  introImageAltText: StringFilter
  introImageCaption: StringFilter
  alumniSpotlight: NewsItemManyRelationFilter
}

input NewsItemManyRelationFilter {
  every: NewsItemWhereInput
  some: NewsItemWhereInput
  none: NewsItemWhereInput
}

input GraduateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  introImageAltText: OrderDirection
  introImageCaption: OrderDirection
}

input GraduateUpdateInput {
  name: String
  intro: JSON
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  mediaDesign: JSON
  symposium: JSON
  salzburg: JSON
  alumniSpotlight: NewsItemRelateToManyForUpdateInput
}

input NewsItemRelateToManyForUpdateInput {
  disconnect: [NewsItemWhereUniqueInput!]
  set: [NewsItemWhereUniqueInput!]
  create: [NewsItemCreateInput!]
  connect: [NewsItemWhereUniqueInput!]
}

input GraduateUpdateArgs {
  where: GraduateWhereUniqueInput!
  data: GraduateUpdateInput!
}

input GraduateCreateInput {
  name: String
  intro: JSON
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  mediaDesign: JSON
  symposium: JSON
  salzburg: JSON
  alumniSpotlight: NewsItemRelateToManyForCreateInput
}

input NewsItemRelateToManyForCreateInput {
  create: [NewsItemCreateInput!]
  connect: [NewsItemWhereUniqueInput!]
}

type Initiative {
  id: ID!
  name: String
  intro: String
  slides(where: SlideWhereInput! = {}, orderBy: [SlideOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SlideWhereUniqueInput): [Slide!]
  slidesCount(where: SlideWhereInput! = {}): Int
}

input InitiativeWhereUniqueInput {
  id: ID
  name: String
}

input InitiativeWhereInput {
  AND: [InitiativeWhereInput!]
  OR: [InitiativeWhereInput!]
  NOT: [InitiativeWhereInput!]
  id: IDFilter
  name: StringFilter
  intro: StringFilter
  slides: SlideManyRelationFilter
}

input SlideManyRelationFilter {
  every: SlideWhereInput
  some: SlideWhereInput
  none: SlideWhereInput
}

input InitiativeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  intro: OrderDirection
}

input InitiativeUpdateInput {
  name: String
  intro: String
  slides: SlideRelateToManyForUpdateInput
}

input SlideRelateToManyForUpdateInput {
  disconnect: [SlideWhereUniqueInput!]
  set: [SlideWhereUniqueInput!]
  create: [SlideCreateInput!]
  connect: [SlideWhereUniqueInput!]
}

input InitiativeUpdateArgs {
  where: InitiativeWhereUniqueInput!
  data: InitiativeUpdateInput!
}

input InitiativeCreateInput {
  name: String
  intro: String
  slides: SlideRelateToManyForCreateInput
}

input SlideRelateToManyForCreateInput {
  create: [SlideCreateInput!]
  connect: [SlideWhereUniqueInput!]
}

type InitiativesLanding {
  id: ID!
  name: String
  intro: String
  introImage: CloudinaryImage_File
  introImageAltText: String
  introImageCaption: String
  tngvi: InitiativesLanding_tngvi_Document
  tn4ej: InitiativesLanding_tn4ej_Document
  everythingElse: InitiativesLanding_everythingElse_Document
}

type InitiativesLanding_tngvi_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type InitiativesLanding_tn4ej_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type InitiativesLanding_everythingElse_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input InitiativesLandingWhereUniqueInput {
  id: ID
  name: String
}

input InitiativesLandingWhereInput {
  AND: [InitiativesLandingWhereInput!]
  OR: [InitiativesLandingWhereInput!]
  NOT: [InitiativesLandingWhereInput!]
  id: IDFilter
  name: StringFilter
  intro: StringFilter
  introImageAltText: StringFilter
  introImageCaption: StringFilter
}

input InitiativesLandingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  intro: OrderDirection
  introImageAltText: OrderDirection
  introImageCaption: OrderDirection
}

input InitiativesLandingUpdateInput {
  name: String
  intro: String
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  tngvi: JSON
  tn4ej: JSON
  everythingElse: JSON
}

input InitiativesLandingUpdateArgs {
  where: InitiativesLandingWhereUniqueInput!
  data: InitiativesLandingUpdateInput!
}

input InitiativesLandingCreateInput {
  name: String
  intro: String
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  tngvi: JSON
  tn4ej: JSON
  everythingElse: JSON
}

type LearningPartners {
  id: ID!
  name: String
  intro: LearningPartners_intro_Document
  introImage: CloudinaryImage_File
  introImageAltText: String
  introImageCaption: String
  what: LearningPartners_what_Document
  benefits: LearningPartners_benefits_Document
  spotlight(where: NewsItemWhereInput! = {}, orderBy: [NewsItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsItemWhereUniqueInput): [NewsItem!]
  spotlightCount(where: NewsItemWhereInput! = {}): Int
}

type LearningPartners_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type LearningPartners_what_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type LearningPartners_benefits_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input LearningPartnersWhereUniqueInput {
  id: ID
  name: String
}

input LearningPartnersWhereInput {
  AND: [LearningPartnersWhereInput!]
  OR: [LearningPartnersWhereInput!]
  NOT: [LearningPartnersWhereInput!]
  id: IDFilter
  name: StringFilter
  introImageAltText: StringFilter
  introImageCaption: StringFilter
  spotlight: NewsItemManyRelationFilter
}

input LearningPartnersOrderByInput {
  id: OrderDirection
  name: OrderDirection
  introImageAltText: OrderDirection
  introImageCaption: OrderDirection
}

input LearningPartnersUpdateInput {
  name: String
  intro: JSON
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  what: JSON
  benefits: JSON
  spotlight: NewsItemRelateToManyForUpdateInput
}

input LearningPartnersUpdateArgs {
  where: LearningPartnersWhereUniqueInput!
  data: LearningPartnersUpdateInput!
}

input LearningPartnersCreateInput {
  name: String
  intro: JSON
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  what: JSON
  benefits: JSON
  spotlight: NewsItemRelateToManyForCreateInput
}

type NewsItem {
  id: ID!
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [NewsItemFlagType!]
  initiatives: [NewsItemInitiativeType!]
  thumbnail: CloudinaryImage_File
  thumbAltText: String
  summary: String
  publishDate: DateTime
  source: String
  linkHelper: HelperFieldOutput
  externalLink: String
  blurb: NewsItem_blurb_Document
  body: NewsItem_body_Document
  alumni(where: GraduateWhereInput! = {}, orderBy: [GraduateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GraduateWhereUniqueInput): [Graduate!]
  alumniCount(where: GraduateWhereInput! = {}): Int
  learningPartners(where: LearningPartnersWhereInput! = {}, orderBy: [LearningPartnersOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LearningPartnersWhereUniqueInput): [LearningPartners!]
  learningPartnersCount(where: LearningPartnersWhereInput! = {}): Int
}

enum NewsItemFlagType {
  home
  section
}

enum NewsItemInitiativeType {
  gunviolence
  climate
}

type HelperFieldOutput {
  html: String
  iconType: String
}

type NewsItem_blurb_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type NewsItem_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NewsItemWhereUniqueInput {
  id: ID
  key: String
}

input NewsItemWhereInput {
  AND: [NewsItemWhereInput!]
  OR: [NewsItemWhereInput!]
  NOT: [NewsItemWhereInput!]
  id: IDFilter
  title: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  thumbAltText: StringFilter
  summary: StringFilter
  publishDate: DateTimeFilter
  source: StringFilter
  externalLink: StringFilter
  alumni: GraduateManyRelationFilter
  learningPartners: LearningPartnersManyRelationFilter
}

input GraduateManyRelationFilter {
  every: GraduateWhereInput
  some: GraduateWhereInput
  none: GraduateWhereInput
}

input LearningPartnersManyRelationFilter {
  every: LearningPartnersWhereInput
  some: LearningPartnersWhereInput
  none: LearningPartnersWhereInput
}

input NewsItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  thumbAltText: OrderDirection
  summary: OrderDirection
  publishDate: OrderDirection
  source: OrderDirection
  externalLink: OrderDirection
}

input NewsItemUpdateInput {
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [NewsItemFlagType!]
  initiatives: [NewsItemInitiativeType!]
  thumbnail: Upload
  thumbAltText: String
  summary: String
  publishDate: DateTime
  source: String
  linkHelper: HelperFieldInput
  externalLink: String
  blurb: JSON
  body: JSON
  alumni: GraduateRelateToManyForUpdateInput
  learningPartners: LearningPartnersRelateToManyForUpdateInput
}

input HelperFieldInput {
  html: String
  iconType: String
}

input GraduateRelateToManyForUpdateInput {
  disconnect: [GraduateWhereUniqueInput!]
  set: [GraduateWhereUniqueInput!]
  create: [GraduateCreateInput!]
  connect: [GraduateWhereUniqueInput!]
}

input LearningPartnersRelateToManyForUpdateInput {
  disconnect: [LearningPartnersWhereUniqueInput!]
  set: [LearningPartnersWhereUniqueInput!]
  create: [LearningPartnersCreateInput!]
  connect: [LearningPartnersWhereUniqueInput!]
}

input NewsItemUpdateArgs {
  where: NewsItemWhereUniqueInput!
  data: NewsItemUpdateInput!
}

input NewsItemCreateInput {
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [NewsItemFlagType!]
  initiatives: [NewsItemInitiativeType!]
  thumbnail: Upload
  thumbAltText: String
  summary: String
  publishDate: DateTime
  source: String
  linkHelper: HelperFieldInput
  externalLink: String
  blurb: JSON
  body: JSON
  alumni: GraduateRelateToManyForCreateInput
  learningPartners: LearningPartnersRelateToManyForCreateInput
}

input GraduateRelateToManyForCreateInput {
  create: [GraduateCreateInput!]
  connect: [GraduateWhereUniqueInput!]
}

input LearningPartnersRelateToManyForCreateInput {
  create: [LearningPartnersCreateInput!]
  connect: [LearningPartnersWhereUniqueInput!]
}

type Partner {
  id: ID!
  name: String
  url: String
  logo: CloudinaryImage_File
  researchProject(where: ResearchProjectWhereInput! = {}, orderBy: [ResearchProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearchProjectWhereUniqueInput): [ResearchProject!]
  researchProjectCount(where: ResearchProjectWhereInput! = {}): Int
}

input PartnerWhereUniqueInput {
  id: ID
}

input PartnerWhereInput {
  AND: [PartnerWhereInput!]
  OR: [PartnerWhereInput!]
  NOT: [PartnerWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  researchProject: ResearchProjectManyRelationFilter
}

input PartnerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
}

input PartnerUpdateInput {
  name: String
  url: String
  logo: Upload
  researchProject: ResearchProjectRelateToManyForUpdateInput
}

input PartnerUpdateArgs {
  where: PartnerWhereUniqueInput!
  data: PartnerUpdateInput!
}

input PartnerCreateInput {
  name: String
  url: String
  logo: Upload
  researchProject: ResearchProjectRelateToManyForCreateInput
}

type Person {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  title: String
  image: CloudinaryImage_File
  category: String
  orderInSection: Int
  content: Person_content_Document
  studioInstructors(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  studioInstructorsCount(where: SemesterWhereInput! = {}): Int
  learningPartners(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  learningPartnersCount(where: SemesterWhereInput! = {}): Int
  studioStudents(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  studioStudentsCount(where: SemesterWhereInput! = {}): Int
  studioStaff(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  studioStaffCount(where: SemesterWhereInput! = {}): Int
  projectStudents(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  projectStudentsCount(where: StudioProjectWhereInput! = {}): Int
  projectPartners(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  projectPartnersCount(where: StudioProjectWhereInput! = {}): Int
  projectInstructors(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  projectInstructorsCount(where: StudioProjectWhereInput! = {}): Int
  projectStaff(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  projectStaffCount(where: StudioProjectWhereInput! = {}): Int
  researchLeads(where: ResearchProjectWhereInput! = {}, orderBy: [ResearchProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearchProjectWhereUniqueInput): [ResearchProject!]
  researchLeadsCount(where: ResearchProjectWhereInput! = {}): Int
}

type Person_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PersonWhereUniqueInput {
  id: ID
  name: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  title: StringFilter
  category: StringNullableFilter
  orderInSection: IntNullableFilter
  studioInstructors: SemesterManyRelationFilter
  learningPartners: SemesterManyRelationFilter
  studioStudents: SemesterManyRelationFilter
  studioStaff: SemesterManyRelationFilter
  projectStudents: StudioProjectManyRelationFilter
  projectPartners: StudioProjectManyRelationFilter
  projectInstructors: StudioProjectManyRelationFilter
  projectStaff: StudioProjectManyRelationFilter
  researchLeads: ResearchProjectManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SemesterManyRelationFilter {
  every: SemesterWhereInput
  some: SemesterWhereInput
  none: SemesterWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  title: OrderDirection
  category: OrderDirection
  orderInSection: OrderDirection
}

input PersonUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  title: String
  image: Upload
  category: String
  orderInSection: Int
  content: JSON
  studioInstructors: SemesterRelateToManyForUpdateInput
  learningPartners: SemesterRelateToManyForUpdateInput
  studioStudents: SemesterRelateToManyForUpdateInput
  studioStaff: SemesterRelateToManyForUpdateInput
  projectStudents: StudioProjectRelateToManyForUpdateInput
  projectPartners: StudioProjectRelateToManyForUpdateInput
  projectInstructors: StudioProjectRelateToManyForUpdateInput
  projectStaff: StudioProjectRelateToManyForUpdateInput
  researchLeads: ResearchProjectRelateToManyForUpdateInput
}

input SemesterRelateToManyForUpdateInput {
  disconnect: [SemesterWhereUniqueInput!]
  set: [SemesterWhereUniqueInput!]
  create: [SemesterCreateInput!]
  connect: [SemesterWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  title: String
  image: Upload
  category: String
  orderInSection: Int
  content: JSON
  studioInstructors: SemesterRelateToManyForCreateInput
  learningPartners: SemesterRelateToManyForCreateInput
  studioStudents: SemesterRelateToManyForCreateInput
  studioStaff: SemesterRelateToManyForCreateInput
  projectStudents: StudioProjectRelateToManyForCreateInput
  projectPartners: StudioProjectRelateToManyForCreateInput
  projectInstructors: StudioProjectRelateToManyForCreateInput
  projectStaff: StudioProjectRelateToManyForCreateInput
  researchLeads: ResearchProjectRelateToManyForCreateInput
}

input SemesterRelateToManyForCreateInput {
  create: [SemesterCreateInput!]
  connect: [SemesterWhereUniqueInput!]
}

type ResearchProject {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [ResearchProjectFlagType!]
  filters(where: FilterWhereInput! = {}, orderBy: [FilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FilterWhereUniqueInput): [Filter!]
  filtersCount(where: FilterWhereInput! = {}): Int
  thumbnail: CloudinaryImage_File
  thumbAltText: String
  headingImage: CloudinaryImage_File
  headingImageAltText: String
  headingText: String
  buttons: JSON
  shortDescription: String
  blurb: ResearchProject_blurb_Document
  content: ResearchProject_content_Document
  partners(where: PartnerWhereInput! = {}, orderBy: [PartnerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartnerWhereUniqueInput): [Partner!]
  partnersCount(where: PartnerWhereInput! = {}): Int
  projectLeads(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  projectLeadsCount(where: PersonWhereInput! = {}): Int
  contact: String
  tools: JSON
}

enum ResearchProjectFlagType {
  home
  section
}

type ResearchProject_blurb_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ResearchProject_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ResearchProjectWhereUniqueInput {
  id: ID
  key: String
}

input ResearchProjectWhereInput {
  AND: [ResearchProjectWhereInput!]
  OR: [ResearchProjectWhereInput!]
  NOT: [ResearchProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  filters: FilterManyRelationFilter
  thumbAltText: StringFilter
  headingImageAltText: StringFilter
  headingText: StringFilter
  shortDescription: StringFilter
  partners: PartnerManyRelationFilter
  projectLeads: PersonManyRelationFilter
  contact: StringFilter
}

input FilterManyRelationFilter {
  every: FilterWhereInput
  some: FilterWhereInput
  none: FilterWhereInput
}

input PartnerManyRelationFilter {
  every: PartnerWhereInput
  some: PartnerWhereInput
  none: PartnerWhereInput
}

input PersonManyRelationFilter {
  every: PersonWhereInput
  some: PersonWhereInput
  none: PersonWhereInput
}

input ResearchProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  thumbAltText: OrderDirection
  headingImageAltText: OrderDirection
  headingText: OrderDirection
  shortDescription: OrderDirection
  contact: OrderDirection
}

input ResearchProjectUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [ResearchProjectFlagType!]
  filters: FilterRelateToManyForUpdateInput
  thumbnail: Upload
  thumbAltText: String
  headingImage: Upload
  headingImageAltText: String
  headingText: String
  buttons: JSON
  shortDescription: String
  blurb: JSON
  content: JSON
  partners: PartnerRelateToManyForUpdateInput
  projectLeads: PersonRelateToManyForUpdateInput
  contact: String
  tools: JSON
}

input FilterRelateToManyForUpdateInput {
  disconnect: [FilterWhereUniqueInput!]
  set: [FilterWhereUniqueInput!]
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

input PartnerRelateToManyForUpdateInput {
  disconnect: [PartnerWhereUniqueInput!]
  set: [PartnerWhereUniqueInput!]
  create: [PartnerCreateInput!]
  connect: [PartnerWhereUniqueInput!]
}

input PersonRelateToManyForUpdateInput {
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

input ResearchProjectUpdateArgs {
  where: ResearchProjectWhereUniqueInput!
  data: ResearchProjectUpdateInput!
}

input ResearchProjectCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  flags: [ResearchProjectFlagType!]
  filters: FilterRelateToManyForCreateInput
  thumbnail: Upload
  thumbAltText: String
  headingImage: Upload
  headingImageAltText: String
  headingText: String
  buttons: JSON
  shortDescription: String
  blurb: JSON
  content: JSON
  partners: PartnerRelateToManyForCreateInput
  projectLeads: PersonRelateToManyForCreateInput
  contact: String
  tools: JSON
}

input FilterRelateToManyForCreateInput {
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

input PartnerRelateToManyForCreateInput {
  create: [PartnerCreateInput!]
  connect: [PartnerWhereUniqueInput!]
}

input PersonRelateToManyForCreateInput {
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

type Semester {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  studio: Studio
  type: SemesterTypeType
  courseNumber: String
  instructors(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  instructorsCount(where: PersonWhereInput! = {}): Int
  description: String
  partners: [SemesterPartnerType!]
  coCreation: Semester_coCreation_Document
  impact: Semester_impact_Document
  projects(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  projectsCount(where: StudioProjectWhereInput! = {}): Int
  learningPartners(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  learningPartnersCount(where: PersonWhereInput! = {}): Int
  studioStudents(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  studioStudentsCount(where: PersonWhereInput! = {}): Int
  studioStaff(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  studioStaffCount(where: PersonWhereInput! = {}): Int
  contact: String
}

enum SemesterTypeType {
  current
  upcoming
}

enum SemesterPartnerType {
  uncornered
  ficdc
  greenroots
  ldbpi
  mgh
  magv
  sftt
  swbcdc
  teenempowerment
  boston
}

type Semester_coCreation_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Semester_impact_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SemesterWhereUniqueInput {
  id: ID
  key: String
}

input SemesterWhereInput {
  AND: [SemesterWhereInput!]
  OR: [SemesterWhereInput!]
  NOT: [SemesterWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  studio: StudioWhereInput
  type: SemesterTypeTypeNullableFilter
  courseNumber: StringFilter
  instructors: PersonManyRelationFilter
  description: StringFilter
  projects: StudioProjectManyRelationFilter
  learningPartners: PersonManyRelationFilter
  studioStudents: PersonManyRelationFilter
  studioStaff: PersonManyRelationFilter
  contact: StringFilter
}

input SemesterTypeTypeNullableFilter {
  equals: SemesterTypeType
  in: [SemesterTypeType!]
  notIn: [SemesterTypeType!]
  not: SemesterTypeTypeNullableFilter
}

input SemesterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  type: OrderDirection
  courseNumber: OrderDirection
  description: OrderDirection
  contact: OrderDirection
}

input SemesterUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  studio: StudioRelateToOneForUpdateInput
  type: SemesterTypeType
  courseNumber: String
  instructors: PersonRelateToManyForUpdateInput
  description: String
  partners: [SemesterPartnerType!]
  coCreation: JSON
  impact: JSON
  projects: StudioProjectRelateToManyForUpdateInput
  learningPartners: PersonRelateToManyForUpdateInput
  studioStudents: PersonRelateToManyForUpdateInput
  studioStaff: PersonRelateToManyForUpdateInput
  contact: String
}

input StudioRelateToOneForUpdateInput {
  create: StudioCreateInput
  connect: StudioWhereUniqueInput
  disconnect: Boolean
}

input SemesterUpdateArgs {
  where: SemesterWhereUniqueInput!
  data: SemesterUpdateInput!
}

input SemesterCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  studio: StudioRelateToOneForCreateInput
  type: SemesterTypeType
  courseNumber: String
  instructors: PersonRelateToManyForCreateInput
  description: String
  partners: [SemesterPartnerType!]
  coCreation: JSON
  impact: JSON
  projects: StudioProjectRelateToManyForCreateInput
  learningPartners: PersonRelateToManyForCreateInput
  studioStudents: PersonRelateToManyForCreateInput
  studioStaff: PersonRelateToManyForCreateInput
  contact: String
}

input StudioRelateToOneForCreateInput {
  create: StudioCreateInput
  connect: StudioWhereUniqueInput
}

type Slide {
  id: ID!
  slideshowSlides(where: SlideshowWhereInput! = {}, orderBy: [SlideshowOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SlideshowWhereUniqueInput): [Slideshow!]
  slideshowSlidesCount(where: SlideshowWhereInput! = {}): Int
  initiativeSlides(where: InitiativeWhereInput! = {}, orderBy: [InitiativeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InitiativeWhereUniqueInput): [Initiative!]
  initiativeSlidesCount(where: InitiativeWhereInput! = {}): Int
  image: CloudinaryImage_File
  helper: HelperFieldOutput
  altText: String
  caption: String
  videoId: String
}

input SlideWhereUniqueInput {
  id: ID
}

input SlideWhereInput {
  AND: [SlideWhereInput!]
  OR: [SlideWhereInput!]
  NOT: [SlideWhereInput!]
  id: IDFilter
  slideshowSlides: SlideshowManyRelationFilter
  initiativeSlides: InitiativeManyRelationFilter
  altText: StringFilter
  caption: StringFilter
  videoId: StringFilter
}

input SlideshowManyRelationFilter {
  every: SlideshowWhereInput
  some: SlideshowWhereInput
  none: SlideshowWhereInput
}

input InitiativeManyRelationFilter {
  every: InitiativeWhereInput
  some: InitiativeWhereInput
  none: InitiativeWhereInput
}

input SlideOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  caption: OrderDirection
  videoId: OrderDirection
}

input SlideUpdateInput {
  slideshowSlides: SlideshowRelateToManyForUpdateInput
  initiativeSlides: InitiativeRelateToManyForUpdateInput
  image: Upload
  helper: HelperFieldInput
  altText: String
  caption: String
  videoId: String
}

input SlideshowRelateToManyForUpdateInput {
  disconnect: [SlideshowWhereUniqueInput!]
  set: [SlideshowWhereUniqueInput!]
  create: [SlideshowCreateInput!]
  connect: [SlideshowWhereUniqueInput!]
}

input InitiativeRelateToManyForUpdateInput {
  disconnect: [InitiativeWhereUniqueInput!]
  set: [InitiativeWhereUniqueInput!]
  create: [InitiativeCreateInput!]
  connect: [InitiativeWhereUniqueInput!]
}

input SlideUpdateArgs {
  where: SlideWhereUniqueInput!
  data: SlideUpdateInput!
}

input SlideCreateInput {
  slideshowSlides: SlideshowRelateToManyForCreateInput
  initiativeSlides: InitiativeRelateToManyForCreateInput
  image: Upload
  helper: HelperFieldInput
  altText: String
  caption: String
  videoId: String
}

input SlideshowRelateToManyForCreateInput {
  create: [SlideshowCreateInput!]
  connect: [SlideshowWhereUniqueInput!]
}

input InitiativeRelateToManyForCreateInput {
  create: [InitiativeCreateInput!]
  connect: [InitiativeWhereUniqueInput!]
}

type Slideshow {
  id: ID!
  name: String
  key: String
  slides(where: SlideWhereInput! = {}, orderBy: [SlideOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SlideWhereUniqueInput): [Slide!]
  slidesCount(where: SlideWhereInput! = {}): Int
}

input SlideshowWhereUniqueInput {
  id: ID
  key: String
}

input SlideshowWhereInput {
  AND: [SlideshowWhereInput!]
  OR: [SlideshowWhereInput!]
  NOT: [SlideshowWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  slides: SlideManyRelationFilter
}

input SlideshowOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
}

input SlideshowUpdateInput {
  name: String
  key: String
  slides: SlideRelateToManyForUpdateInput
}

input SlideshowUpdateArgs {
  where: SlideshowWhereUniqueInput!
  data: SlideshowUpdateInput!
}

input SlideshowCreateInput {
  name: String
  key: String
  slides: SlideRelateToManyForCreateInput
}

type Studio {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: CloudinaryImage_File
  thumbAltText: String
  shortDescription: String
  blurb: String
  semesters(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  semestersCount(where: SemesterWhereInput! = {}): Int
  initiatives: [StudioInitiativeType!]
}

enum StudioInitiativeType {
  gunviolence
  climate
  incarceration
}

input StudioWhereUniqueInput {
  id: ID
  key: String
}

input StudioWhereInput {
  AND: [StudioWhereInput!]
  OR: [StudioWhereInput!]
  NOT: [StudioWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  thumbAltText: StringFilter
  shortDescription: StringFilter
  blurb: StringFilter
  semesters: SemesterManyRelationFilter
}

input StudioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  thumbAltText: OrderDirection
  shortDescription: OrderDirection
  blurb: OrderDirection
}

input StudioUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  thumbAltText: String
  shortDescription: String
  blurb: String
  semesters: SemesterRelateToManyForUpdateInput
  initiatives: [StudioInitiativeType!]
}

input StudioUpdateArgs {
  where: StudioWhereUniqueInput!
  data: StudioUpdateInput!
}

input StudioCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  thumbAltText: String
  shortDescription: String
  blurb: String
  semesters: SemesterRelateToManyForCreateInput
  initiatives: [StudioInitiativeType!]
}

type StudioProject {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  initiative: StudioProjectInitiativeType
  filters(where: FilterWhereInput! = {}, orderBy: [FilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FilterWhereUniqueInput): [Filter!]
  filtersCount(where: FilterWhereInput! = {}): Int
  flags: [StudioProjectFlagType!]
  thumbnail: CloudinaryImage_File
  thumbAltText: String
  shortDescription: String
  videoId: String
  trailerId: String
  trailerThumbnail: CloudinaryImage_File
  trailerThumbAltText: String
  about: StudioProject_about_Document
  buttons: JSON
  blurb: StudioProject_blurb_Document
  partners: [StudioProjectPartnerType!]
  coCreation: StudioProject_coCreation_Document
  impact: StudioProject_impact_Document
  learningPartners(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  learningPartnersCount(where: PersonWhereInput! = {}): Int
  studioStudents(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  studioStudentsCount(where: PersonWhereInput! = {}): Int
  studioStaff(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  studioStaffCount(where: PersonWhereInput! = {}): Int
  instructors(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  instructorsCount(where: PersonWhereInput! = {}): Int
  semester(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  semesterCount(where: SemesterWhereInput! = {}): Int
  undergrad(where: UndergraduateWhereInput! = {}, orderBy: [UndergraduateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UndergraduateWhereUniqueInput): [Undergraduate!]
  undergradCount(where: UndergraduateWhereInput! = {}): Int
}

enum StudioProjectInitiativeType {
  gunviolence
  climate
}

enum StudioProjectFlagType {
  home
  section
}

type StudioProject_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type StudioProject_blurb_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum StudioProjectPartnerType {
  uncornered
  ficdc
  greenroots
  ldbpi
  mgh
  magv
  sftt
  swbcdc
  teenempowerment
  boston
}

type StudioProject_coCreation_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type StudioProject_impact_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input StudioProjectWhereUniqueInput {
  id: ID
  key: String
}

input StudioProjectWhereInput {
  AND: [StudioProjectWhereInput!]
  OR: [StudioProjectWhereInput!]
  NOT: [StudioProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  initiative: StudioProjectInitiativeTypeNullableFilter
  filters: FilterManyRelationFilter
  thumbAltText: StringFilter
  shortDescription: StringFilter
  videoId: StringFilter
  trailerId: StringFilter
  trailerThumbAltText: StringFilter
  learningPartners: PersonManyRelationFilter
  studioStudents: PersonManyRelationFilter
  studioStaff: PersonManyRelationFilter
  instructors: PersonManyRelationFilter
  semester: SemesterManyRelationFilter
  undergrad: UndergraduateManyRelationFilter
}

input StudioProjectInitiativeTypeNullableFilter {
  equals: StudioProjectInitiativeType
  in: [StudioProjectInitiativeType!]
  notIn: [StudioProjectInitiativeType!]
  not: StudioProjectInitiativeTypeNullableFilter
}

input UndergraduateManyRelationFilter {
  every: UndergraduateWhereInput
  some: UndergraduateWhereInput
  none: UndergraduateWhereInput
}

input StudioProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  initiative: OrderDirection
  thumbAltText: OrderDirection
  shortDescription: OrderDirection
  videoId: OrderDirection
  trailerId: OrderDirection
  trailerThumbAltText: OrderDirection
}

input StudioProjectUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  initiative: StudioProjectInitiativeType
  filters: FilterRelateToManyForUpdateInput
  flags: [StudioProjectFlagType!]
  thumbnail: Upload
  thumbAltText: String
  shortDescription: String
  videoId: String
  trailerId: String
  trailerThumbnail: Upload
  trailerThumbAltText: String
  about: JSON
  buttons: JSON
  blurb: JSON
  partners: [StudioProjectPartnerType!]
  coCreation: JSON
  impact: JSON
  learningPartners: PersonRelateToManyForUpdateInput
  studioStudents: PersonRelateToManyForUpdateInput
  studioStaff: PersonRelateToManyForUpdateInput
  instructors: PersonRelateToManyForUpdateInput
  semester: SemesterRelateToManyForUpdateInput
  undergrad: UndergraduateRelateToManyForUpdateInput
}

input UndergraduateRelateToManyForUpdateInput {
  disconnect: [UndergraduateWhereUniqueInput!]
  set: [UndergraduateWhereUniqueInput!]
  create: [UndergraduateCreateInput!]
  connect: [UndergraduateWhereUniqueInput!]
}

input StudioProjectUpdateArgs {
  where: StudioProjectWhereUniqueInput!
  data: StudioProjectUpdateInput!
}

input StudioProjectCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  initiative: StudioProjectInitiativeType
  filters: FilterRelateToManyForCreateInput
  flags: [StudioProjectFlagType!]
  thumbnail: Upload
  thumbAltText: String
  shortDescription: String
  videoId: String
  trailerId: String
  trailerThumbnail: Upload
  trailerThumbAltText: String
  about: JSON
  buttons: JSON
  blurb: JSON
  partners: [StudioProjectPartnerType!]
  coCreation: JSON
  impact: JSON
  learningPartners: PersonRelateToManyForCreateInput
  studioStudents: PersonRelateToManyForCreateInput
  studioStaff: PersonRelateToManyForCreateInput
  instructors: PersonRelateToManyForCreateInput
  semester: SemesterRelateToManyForCreateInput
  undergrad: UndergraduateRelateToManyForCreateInput
}

input UndergraduateRelateToManyForCreateInput {
  create: [UndergraduateCreateInput!]
  connect: [UndergraduateWhereUniqueInput!]
}

type Undergraduate {
  id: ID!
  name: String
  intro: Undergraduate_intro_Document
  introImage: CloudinaryImage_File
  introImageAltText: String
  introImageCaption: String
  socialImpactDesign: Undergraduate_socialImpactDesign_Document
  projectSpotlight(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  projectSpotlightCount(where: StudioProjectWhereInput! = {}): Int
}

type Undergraduate_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Undergraduate_socialImpactDesign_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input UndergraduateWhereUniqueInput {
  id: ID
  name: String
}

input UndergraduateWhereInput {
  AND: [UndergraduateWhereInput!]
  OR: [UndergraduateWhereInput!]
  NOT: [UndergraduateWhereInput!]
  id: IDFilter
  name: StringFilter
  introImageAltText: StringFilter
  introImageCaption: StringFilter
  projectSpotlight: StudioProjectManyRelationFilter
}

input UndergraduateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  introImageAltText: OrderDirection
  introImageCaption: OrderDirection
}

input UndergraduateUpdateInput {
  name: String
  intro: JSON
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  socialImpactDesign: JSON
  projectSpotlight: StudioProjectRelateToManyForUpdateInput
}

input UndergraduateUpdateArgs {
  where: UndergraduateWhereUniqueInput!
  data: UndergraduateUpdateInput!
}

input UndergraduateCreateInput {
  name: String
  intro: JSON
  introImage: Upload
  introImageAltText: String
  introImageCaption: String
  socialImpactDesign: JSON
  projectSpotlight: StudioProjectRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput!, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createFilter(data: FilterCreateInput!): Filter
  createFilters(data: [FilterCreateInput!]!): [Filter]
  updateFilter(where: FilterWhereUniqueInput!, data: FilterUpdateInput!): Filter
  updateFilters(data: [FilterUpdateArgs!]!): [Filter]
  deleteFilter(where: FilterWhereUniqueInput!): Filter
  deleteFilters(where: [FilterWhereUniqueInput!]!): [Filter]
  createGraduate(data: GraduateCreateInput!): Graduate
  createGraduates(data: [GraduateCreateInput!]!): [Graduate]
  updateGraduate(where: GraduateWhereUniqueInput!, data: GraduateUpdateInput!): Graduate
  updateGraduates(data: [GraduateUpdateArgs!]!): [Graduate]
  deleteGraduate(where: GraduateWhereUniqueInput!): Graduate
  deleteGraduates(where: [GraduateWhereUniqueInput!]!): [Graduate]
  createInitiative(data: InitiativeCreateInput!): Initiative
  createInitiatives(data: [InitiativeCreateInput!]!): [Initiative]
  updateInitiative(where: InitiativeWhereUniqueInput!, data: InitiativeUpdateInput!): Initiative
  updateInitiatives(data: [InitiativeUpdateArgs!]!): [Initiative]
  deleteInitiative(where: InitiativeWhereUniqueInput!): Initiative
  deleteInitiatives(where: [InitiativeWhereUniqueInput!]!): [Initiative]
  createInitiativesLanding(data: InitiativesLandingCreateInput!): InitiativesLanding
  createInitiativesLandings(data: [InitiativesLandingCreateInput!]!): [InitiativesLanding]
  updateInitiativesLanding(where: InitiativesLandingWhereUniqueInput!, data: InitiativesLandingUpdateInput!): InitiativesLanding
  updateInitiativesLandings(data: [InitiativesLandingUpdateArgs!]!): [InitiativesLanding]
  deleteInitiativesLanding(where: InitiativesLandingWhereUniqueInput!): InitiativesLanding
  deleteInitiativesLandings(where: [InitiativesLandingWhereUniqueInput!]!): [InitiativesLanding]
  createLearningPartners(data: LearningPartnersCreateInput!): LearningPartners
  createLearningPartner(data: [LearningPartnersCreateInput!]!): [LearningPartners]
  updateLearningPartners(where: LearningPartnersWhereUniqueInput!, data: LearningPartnersUpdateInput!): LearningPartners
  updateLearningPartner(data: [LearningPartnersUpdateArgs!]!): [LearningPartners]
  deleteLearningPartners(where: LearningPartnersWhereUniqueInput!): LearningPartners
  deleteLearningPartner(where: [LearningPartnersWhereUniqueInput!]!): [LearningPartners]
  createNewsItem(data: NewsItemCreateInput!): NewsItem
  createNewsItems(data: [NewsItemCreateInput!]!): [NewsItem]
  updateNewsItem(where: NewsItemWhereUniqueInput!, data: NewsItemUpdateInput!): NewsItem
  updateNewsItems(data: [NewsItemUpdateArgs!]!): [NewsItem]
  deleteNewsItem(where: NewsItemWhereUniqueInput!): NewsItem
  deleteNewsItems(where: [NewsItemWhereUniqueInput!]!): [NewsItem]
  createPartner(data: PartnerCreateInput!): Partner
  createPartners(data: [PartnerCreateInput!]!): [Partner]
  updatePartner(where: PartnerWhereUniqueInput!, data: PartnerUpdateInput!): Partner
  updatePartners(data: [PartnerUpdateArgs!]!): [Partner]
  deletePartner(where: PartnerWhereUniqueInput!): Partner
  deletePartners(where: [PartnerWhereUniqueInput!]!): [Partner]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createResearchProject(data: ResearchProjectCreateInput!): ResearchProject
  createResearchProjects(data: [ResearchProjectCreateInput!]!): [ResearchProject]
  updateResearchProject(where: ResearchProjectWhereUniqueInput!, data: ResearchProjectUpdateInput!): ResearchProject
  updateResearchProjects(data: [ResearchProjectUpdateArgs!]!): [ResearchProject]
  deleteResearchProject(where: ResearchProjectWhereUniqueInput!): ResearchProject
  deleteResearchProjects(where: [ResearchProjectWhereUniqueInput!]!): [ResearchProject]
  createSemester(data: SemesterCreateInput!): Semester
  createSemesters(data: [SemesterCreateInput!]!): [Semester]
  updateSemester(where: SemesterWhereUniqueInput!, data: SemesterUpdateInput!): Semester
  updateSemesters(data: [SemesterUpdateArgs!]!): [Semester]
  deleteSemester(where: SemesterWhereUniqueInput!): Semester
  deleteSemesters(where: [SemesterWhereUniqueInput!]!): [Semester]
  createSlide(data: SlideCreateInput!): Slide
  createSlides(data: [SlideCreateInput!]!): [Slide]
  updateSlide(where: SlideWhereUniqueInput!, data: SlideUpdateInput!): Slide
  updateSlides(data: [SlideUpdateArgs!]!): [Slide]
  deleteSlide(where: SlideWhereUniqueInput!): Slide
  deleteSlides(where: [SlideWhereUniqueInput!]!): [Slide]
  createSlideshow(data: SlideshowCreateInput!): Slideshow
  createSlideshows(data: [SlideshowCreateInput!]!): [Slideshow]
  updateSlideshow(where: SlideshowWhereUniqueInput!, data: SlideshowUpdateInput!): Slideshow
  updateSlideshows(data: [SlideshowUpdateArgs!]!): [Slideshow]
  deleteSlideshow(where: SlideshowWhereUniqueInput!): Slideshow
  deleteSlideshows(where: [SlideshowWhereUniqueInput!]!): [Slideshow]
  createStudio(data: StudioCreateInput!): Studio
  createStudios(data: [StudioCreateInput!]!): [Studio]
  updateStudio(where: StudioWhereUniqueInput!, data: StudioUpdateInput!): Studio
  updateStudios(data: [StudioUpdateArgs!]!): [Studio]
  deleteStudio(where: StudioWhereUniqueInput!): Studio
  deleteStudios(where: [StudioWhereUniqueInput!]!): [Studio]
  createStudioProject(data: StudioProjectCreateInput!): StudioProject
  createStudioProjects(data: [StudioProjectCreateInput!]!): [StudioProject]
  updateStudioProject(where: StudioProjectWhereUniqueInput!, data: StudioProjectUpdateInput!): StudioProject
  updateStudioProjects(data: [StudioProjectUpdateArgs!]!): [StudioProject]
  deleteStudioProject(where: StudioProjectWhereUniqueInput!): StudioProject
  deleteStudioProjects(where: [StudioProjectWhereUniqueInput!]!): [StudioProject]
  createUndergraduate(data: UndergraduateCreateInput!): Undergraduate
  createUndergraduates(data: [UndergraduateCreateInput!]!): [Undergraduate]
  updateUndergraduate(where: UndergraduateWhereUniqueInput!, data: UndergraduateUpdateInput!): Undergraduate
  updateUndergraduates(data: [UndergraduateUpdateArgs!]!): [Undergraduate]
  deleteUndergraduate(where: UndergraduateWhereUniqueInput!): Undergraduate
  deleteUndergraduates(where: [UndergraduateWhereUniqueInput!]!): [Undergraduate]
}

type Query {
  abouts(where: AboutWhereInput! = {}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutWhereUniqueInput): [About!]
  about(where: AboutWhereUniqueInput!): About
  aboutsCount(where: AboutWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  filters(where: FilterWhereInput! = {}, orderBy: [FilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FilterWhereUniqueInput): [Filter!]
  filter(where: FilterWhereUniqueInput!): Filter
  filtersCount(where: FilterWhereInput! = {}): Int
  graduates(where: GraduateWhereInput! = {}, orderBy: [GraduateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GraduateWhereUniqueInput): [Graduate!]
  graduate(where: GraduateWhereUniqueInput!): Graduate
  graduatesCount(where: GraduateWhereInput! = {}): Int
  initiatives(where: InitiativeWhereInput! = {}, orderBy: [InitiativeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InitiativeWhereUniqueInput): [Initiative!]
  initiative(where: InitiativeWhereUniqueInput!): Initiative
  initiativesCount(where: InitiativeWhereInput! = {}): Int
  initiativesLandings(where: InitiativesLandingWhereInput! = {}, orderBy: [InitiativesLandingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InitiativesLandingWhereUniqueInput): [InitiativesLanding!]
  initiativesLanding(where: InitiativesLandingWhereUniqueInput!): InitiativesLanding
  initiativesLandingsCount(where: InitiativesLandingWhereInput! = {}): Int
  learningPartner(where: LearningPartnersWhereInput! = {}, orderBy: [LearningPartnersOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LearningPartnersWhereUniqueInput): [LearningPartners!]
  learningPartners(where: LearningPartnersWhereUniqueInput!): LearningPartners
  learningPartnerCount(where: LearningPartnersWhereInput! = {}): Int
  newsItems(where: NewsItemWhereInput! = {}, orderBy: [NewsItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsItemWhereUniqueInput): [NewsItem!]
  newsItem(where: NewsItemWhereUniqueInput!): NewsItem
  newsItemsCount(where: NewsItemWhereInput! = {}): Int
  partners(where: PartnerWhereInput! = {}, orderBy: [PartnerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartnerWhereUniqueInput): [Partner!]
  partner(where: PartnerWhereUniqueInput!): Partner
  partnersCount(where: PartnerWhereInput! = {}): Int
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  researchProjects(where: ResearchProjectWhereInput! = {}, orderBy: [ResearchProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResearchProjectWhereUniqueInput): [ResearchProject!]
  researchProject(where: ResearchProjectWhereUniqueInput!): ResearchProject
  researchProjectsCount(where: ResearchProjectWhereInput! = {}): Int
  semesters(where: SemesterWhereInput! = {}, orderBy: [SemesterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SemesterWhereUniqueInput): [Semester!]
  semester(where: SemesterWhereUniqueInput!): Semester
  semestersCount(where: SemesterWhereInput! = {}): Int
  slides(where: SlideWhereInput! = {}, orderBy: [SlideOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SlideWhereUniqueInput): [Slide!]
  slide(where: SlideWhereUniqueInput!): Slide
  slidesCount(where: SlideWhereInput! = {}): Int
  slideshows(where: SlideshowWhereInput! = {}, orderBy: [SlideshowOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SlideshowWhereUniqueInput): [Slideshow!]
  slideshow(where: SlideshowWhereUniqueInput!): Slideshow
  slideshowsCount(where: SlideshowWhereInput! = {}): Int
  studios(where: StudioWhereInput! = {}, orderBy: [StudioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioWhereUniqueInput): [Studio!]
  studio(where: StudioWhereUniqueInput!): Studio
  studiosCount(where: StudioWhereInput! = {}): Int
  studioProjects(where: StudioProjectWhereInput! = {}, orderBy: [StudioProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudioProjectWhereUniqueInput): [StudioProject!]
  studioProject(where: StudioProjectWhereUniqueInput!): StudioProject
  studioProjectsCount(where: StudioProjectWhereInput! = {}): Int
  undergraduates(where: UndergraduateWhereInput! = {}, orderBy: [UndergraduateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UndergraduateWhereUniqueInput): [Undergraduate!]
  undergraduate(where: UndergraduateWhereUniqueInput!): Undergraduate
  undergraduatesCount(where: UndergraduateWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
