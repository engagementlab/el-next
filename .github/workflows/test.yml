name: test
on: 
  repository_dispatch:
    types: deploy-test
env:
  CI: true
  NODE_ENV: production
  DB_URI: ${{ secrets.DB_URI }}
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
jobs:
  initial-setup:
    uses: engagementlab/el-next/.github/workflows/init.yml@main
  run-cms:
    needs: initial-setup
    name: "Run CMS, make build"
    # Do not run on automated commits (interpretation of TravisCI feature)
    if: "!contains(github.event.head_commit.message, 'skip ci') &&  github.actor != 'dependabot[bot]'"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.13.1]
    steps:
      - name: Download artifacts from initial-setup job
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('artifact-repo-{0}', github.run_id) }}

      - name: Install global packages
        run: npm install -g yarn pm2 @preconstruct/cli

      - name: Install local monorepo packages and run preconstruct
        run: yarn

      - name: Run CMS
        working-directory: apps/cms  
        env:
          AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
          AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
          DB_URI: ${{ format('{0}/{1}', secrets.DB_URI_PREFIX, github.event.client_payload.appName) }}
        run: |
          yarn add typescript @types/node yargs
          yarn
          yarn postinstall --app sjm
          yarn build --app ${{ github.event.client_payload.appName }}
          pm2 start yarn --name "el-cms" -- dev --port 8000 --app ${{ github.event.client_payload.appName }}

      - name: Make production build
        working-directory: ${{ format('apps/{0}', github.event.client_payload.appName) }}
        env:
          APOLLO_CLIENT_GRAPHQL_URI: ${{ format('https://qa.{0}/api/graphql', github.event.client_payload.apexUrl) }}
        run: |
          yarn add typescript @types/node
          yarn
          yarn build
           
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format('artifact-build-{0}', github.run_id) }}
          retention-days: 1
          path: |
            ${{ format('apps/{0}/out', github.event.client_payload.appName) }}
            ./scripts/test.sh
            outputRoutes.mjs
            package.json
 
  production-publish:
    name: "Publish new build to production"
    needs: [initial-setup, run-cms]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.13.1]
    steps:
      - id: string-app-name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.event.client_payload.appName }}

      - name: Install packages
        run: npm i -g pa11y-ci http-server pm2 && npm i

      - name: Download artifacts from production build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('artifact-build-{0}', github.run_id) }}
          
      - name: Serve build 
        working-directory: ./
        run: pm2 start `which http-server` --name server
      - name: Output all build paths to .pa11yci config and run pa11y
        run: |
          node outputRoutes.mjs --app ${{ github.event.client_payload.appName }}
          pa11y-ci
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy static build to Azure storage if succeeded
      - name: Deploy static build
        env:
          APP_NAME: ${{ github.event.client_payload.appName }}
          STORAGE_ACCOUNT: ${{ github.event.client_payload.storageAccount }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GHA_RUNNUM: ${{ github.run_number }}
        # Install azure-cli, run Bash scripts
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          chmod 777 ./scripts/upload.sh && ./scripts/upload.sh
        # chmod 777 ./scripts/commit.sh && ./scripts/commit.sh

      - name: Send Slack message on success
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        if: ${{ success() }}
        with:
          # Build succeeded
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "_This is a test_. :white_check_mark: The latest build of 
                            ${{ steps.string-app-name.outputs.uppercase }} has successfully been published to 
                            <${{ format('https://{0}', github.event.client_payload.apexUrl) }}|production>. _(Build #${{ github.run_number }})_"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ github.event.client_payload.userName }} pushed this build."
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send Slack message on failure
        id: slack-failure
        uses: slackapi/slack-github-action@v1.18.0
        if: ${{ failure() }}
        with:
          # Build failed
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "_This is a test_. ${{ steps.string-app-name.outputs.uppercase }} test run failed."
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ github.event.client_payload.userName }} pushed this build."
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK