# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type About {
  id: ID!
  name: String
  intro: About_intro_Document
  books: About_books_Document
  selectWritings: About_selectWritings_Document
}

type About_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type About_books_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type About_selectWritings_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutWhereUniqueInput {
  id: ID
  name: String
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  name: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AboutOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AboutUpdateInput {
  name: String
  intro: JSON
  books: JSON
  selectWritings: JSON
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput!
  data: AboutUpdateInput!
}

input AboutCreateInput {
  name: String
  intro: JSON
  books: JSON
  selectWritings: JSON
}

type Award {
  id: ID!
  name: String
  key: String
  intro: Award_intro_Document
  apply: Award_apply_Document
  bgImage1: CloudinaryImage_File
  pastRecipients: Award_pastRecipients_Document
}

type Award_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Award_apply_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicId: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type Award_pastRecipients_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AwardWhereUniqueInput {
  id: ID
  name: String
  key: String
}

input AwardWhereInput {
  AND: [AwardWhereInput!]
  OR: [AwardWhereInput!]
  NOT: [AwardWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
}

input AwardOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
}

input AwardUpdateInput {
  name: String
  key: String
  intro: JSON
  apply: JSON
  bgImage1: Upload
  pastRecipients: JSON
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AwardUpdateArgs {
  where: AwardWhereUniqueInput!
  data: AwardUpdateInput!
}

input AwardCreateInput {
  name: String
  key: String
  intro: JSON
  apply: JSON
  bgImage1: Upload
  pastRecipients: JSON
}

type Event {
  id: ID!
  name: String
  key: String
  intro: Event_intro_Document
  bgImage1: CloudinaryImage_File
  agenda: Event_agenda_Document
  awards: Event_awards_Document
  bgImage2: CloudinaryImage_File
  location: Event_location_Document
  gallerySlides(where: GallerySlideWhereInput! = {}, orderBy: [GallerySlideOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GallerySlideWhereUniqueInput): [GallerySlide!]
  gallerySlidesCount(where: GallerySlideWhereInput! = {}): Int
}

type Event_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Event_agenda_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Event_awards_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Event_location_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereUniqueInput {
  id: ID
  name: String
  key: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  gallerySlides: GallerySlideManyRelationFilter
}

input GallerySlideManyRelationFilter {
  every: GallerySlideWhereInput
  some: GallerySlideWhereInput
  none: GallerySlideWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
}

input EventUpdateInput {
  name: String
  key: String
  intro: JSON
  bgImage1: Upload
  agenda: JSON
  awards: JSON
  bgImage2: Upload
  location: JSON
  gallerySlides: GallerySlideRelateToManyForUpdateInput
}

input GallerySlideRelateToManyForUpdateInput {
  disconnect: [GallerySlideWhereUniqueInput!]
  set: [GallerySlideWhereUniqueInput!]
  create: [GallerySlideCreateInput!]
  connect: [GallerySlideWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  key: String
  intro: JSON
  bgImage1: Upload
  agenda: JSON
  awards: JSON
  bgImage2: Upload
  location: JSON
  gallerySlides: GallerySlideRelateToManyForCreateInput
}

input GallerySlideRelateToManyForCreateInput {
  create: [GallerySlideCreateInput!]
  connect: [GallerySlideWhereUniqueInput!]
}

type GallerySlide {
  id: ID!
  gallerySlides(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  gallerySlidesCount(where: EventWhereInput! = {}): Int
  image: CloudinaryImage_File
  altText: String
  caption: String
}

input GallerySlideWhereUniqueInput {
  id: ID
}

input GallerySlideWhereInput {
  AND: [GallerySlideWhereInput!]
  OR: [GallerySlideWhereInput!]
  NOT: [GallerySlideWhereInput!]
  id: IDFilter
  gallerySlides: EventManyRelationFilter
  altText: StringFilter
  caption: StringFilter
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input GallerySlideOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  caption: OrderDirection
}

input GallerySlideUpdateInput {
  gallerySlides: EventRelateToManyForUpdateInput
  image: Upload
  altText: String
  caption: String
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input GallerySlideUpdateArgs {
  where: GallerySlideWhereUniqueInput!
  data: GallerySlideUpdateInput!
}

input GallerySlideCreateInput {
  gallerySlides: EventRelateToManyForCreateInput
  image: Upload
  altText: String
  caption: String
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type Home {
  id: ID!
  name: String
  content: Home_content_Document
}

type Home_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input HomeWhereUniqueInput {
  id: ID
  name: String
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input HomeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input HomeUpdateInput {
  name: String
  content: JSON
}

input HomeUpdateArgs {
  where: HomeWhereUniqueInput!
  data: HomeUpdateInput!
}

input HomeCreateInput {
  name: String
  content: JSON
}

type Person {
  id: ID!
  name: String
  key: String
  title: String
  createdDate: DateTime
  enabled: Boolean
  image: CloudinaryImage_File
  blurb: String
  content: Person_content_Document
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Person_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  title: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  blurb: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  title: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  blurb: OrderDirection
}

input PersonUpdateInput {
  name: String
  key: String
  title: String
  createdDate: DateTime
  enabled: Boolean
  image: Upload
  blurb: String
  content: JSON
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  key: String
  title: String
  createdDate: DateTime
  enabled: Boolean
  image: Upload
  blurb: String
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput!, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createAward(data: AwardCreateInput!): Award
  createAwards(data: [AwardCreateInput!]!): [Award]
  updateAward(where: AwardWhereUniqueInput!, data: AwardUpdateInput!): Award
  updateAwards(data: [AwardUpdateArgs!]!): [Award]
  deleteAward(where: AwardWhereUniqueInput!): Award
  deleteAwards(where: [AwardWhereUniqueInput!]!): [Award]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createGallerySlide(data: GallerySlideCreateInput!): GallerySlide
  createGallerySlides(data: [GallerySlideCreateInput!]!): [GallerySlide]
  updateGallerySlide(where: GallerySlideWhereUniqueInput!, data: GallerySlideUpdateInput!): GallerySlide
  updateGallerySlides(data: [GallerySlideUpdateArgs!]!): [GallerySlide]
  deleteGallerySlide(where: GallerySlideWhereUniqueInput!): GallerySlide
  deleteGallerySlides(where: [GallerySlideWhereUniqueInput!]!): [GallerySlide]
  createHome(data: HomeCreateInput!): Home
  createHomes(data: [HomeCreateInput!]!): [Home]
  updateHome(where: HomeWhereUniqueInput!, data: HomeUpdateInput!): Home
  updateHomes(data: [HomeUpdateArgs!]!): [Home]
  deleteHome(where: HomeWhereUniqueInput!): Home
  deleteHomes(where: [HomeWhereUniqueInput!]!): [Home]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
}

type Query {
  abouts(where: AboutWhereInput! = {}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutWhereUniqueInput): [About!]
  about(where: AboutWhereUniqueInput!): About
  aboutsCount(where: AboutWhereInput! = {}): Int
  awards(where: AwardWhereInput! = {}, orderBy: [AwardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AwardWhereUniqueInput): [Award!]
  award(where: AwardWhereUniqueInput!): Award
  awardsCount(where: AwardWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  gallerySlides(where: GallerySlideWhereInput! = {}, orderBy: [GallerySlideOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GallerySlideWhereUniqueInput): [GallerySlide!]
  gallerySlide(where: GallerySlideWhereUniqueInput!): GallerySlide
  gallerySlidesCount(where: GallerySlideWhereInput! = {}): Int
  homes(where: HomeWhereInput! = {}, orderBy: [HomeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HomeWhereUniqueInput): [Home!]
  home(where: HomeWhereUniqueInput!): Home
  homesCount(where: HomeWhereInput! = {}): Int
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
