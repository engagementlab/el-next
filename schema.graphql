# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type HomeSlide {
  id: ID!
  homeSlides(
    where: HomeWhereInput! = {}
    orderBy: [HomeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Home!]
  homeSlidesCount(where: HomeWhereInput! = {}): Int
  image: CloudinaryImage_File
  altText: String
  quote: String
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicId: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input HomeSlideWhereUniqueInput {
  id: ID
}

input HomeSlideWhereInput {
  AND: [HomeSlideWhereInput!]
  OR: [HomeSlideWhereInput!]
  NOT: [HomeSlideWhereInput!]
  id: IDFilter
  homeSlides: HomeManyRelationFilter
  altText: StringFilter
  quote: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input HomeManyRelationFilter {
  every: HomeWhereInput
  some: HomeWhereInput
  none: HomeWhereInput
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input HomeSlideOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  quote: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input HomeSlideUpdateInput {
  homeSlides: HomeRelateToManyForUpdateInput
  image: Upload
  altText: String
  quote: String
}

input HomeRelateToManyForUpdateInput {
  disconnect: [HomeWhereUniqueInput!]
  set: [HomeWhereUniqueInput!]
  create: [HomeCreateInput!]
  connect: [HomeWhereUniqueInput!]
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input HomeSlideUpdateArgs {
  where: HomeSlideWhereUniqueInput!
  data: HomeSlideUpdateInput!
}

input HomeSlideCreateInput {
  homeSlides: HomeRelateToManyForCreateInput
  image: Upload
  altText: String
  quote: String
}

input HomeRelateToManyForCreateInput {
  create: [HomeCreateInput!]
  connect: [HomeWhereUniqueInput!]
}

type Home {
  id: ID!
  name: String
  intro: Home_intro_Document
  slides(
    where: HomeSlideWhereInput! = {}
    orderBy: [HomeSlideOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HomeSlide!]
  slidesCount(where: HomeSlideWhereInput! = {}): Int
}

type Home_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input HomeWhereUniqueInput {
  id: ID
  name: String
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IDFilter
  name: StringFilter
  slides: HomeSlideManyRelationFilter
}

input HomeSlideManyRelationFilter {
  every: HomeSlideWhereInput
  some: HomeSlideWhereInput
  none: HomeSlideWhereInput
}

input HomeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input HomeUpdateInput {
  name: String
  intro: JSON
  slides: HomeSlideRelateToManyForUpdateInput
}

input HomeSlideRelateToManyForUpdateInput {
  disconnect: [HomeSlideWhereUniqueInput!]
  set: [HomeSlideWhereUniqueInput!]
  create: [HomeSlideCreateInput!]
  connect: [HomeSlideWhereUniqueInput!]
}

input HomeUpdateArgs {
  where: HomeWhereUniqueInput!
  data: HomeUpdateInput!
}

input HomeCreateInput {
  name: String
  intro: JSON
  slides: HomeSlideRelateToManyForCreateInput
}

input HomeSlideRelateToManyForCreateInput {
  create: [HomeSlideCreateInput!]
  connect: [HomeSlideWhereUniqueInput!]
}

type Filter {
  id: ID!
  name: String
  type: FilterTypeType
}

enum FilterTypeType {
  Voices
  Media
  Departments
  Year
}

input FilterWhereUniqueInput {
  id: ID
}

input FilterWhereInput {
  AND: [FilterWhereInput!]
  OR: [FilterWhereInput!]
  NOT: [FilterWhereInput!]
  id: IDFilter
  name: StringFilter
  type: FilterTypeTypeNullableFilter
}

input FilterTypeTypeNullableFilter {
  equals: FilterTypeType
  in: [FilterTypeType!]
  notIn: [FilterTypeType!]
  not: FilterTypeTypeNullableFilter
}

input FilterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
}

input FilterUpdateInput {
  name: String
  type: FilterTypeType
}

input FilterUpdateArgs {
  where: FilterWhereUniqueInput!
  data: FilterUpdateInput!
}

input FilterCreateInput {
  name: String
  type: FilterTypeType
}

type MediaImage {
  id: ID!
  mediaImages(
    where: MediaItemWhereInput! = {}
    orderBy: [MediaItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaItem!]
  mediaImagesCount(where: MediaItemWhereInput! = {}): Int
  mediaGalleryImages(
    where: MediaItemWhereInput! = {}
    orderBy: [MediaItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaItem!]
  mediaGalleryImagesCount(where: MediaItemWhereInput! = {}): Int
  image: CloudinaryImage_File
  imageName: String
  altText: String
  caption: String
}

input MediaImageWhereUniqueInput {
  id: ID
}

input MediaImageWhereInput {
  AND: [MediaImageWhereInput!]
  OR: [MediaImageWhereInput!]
  NOT: [MediaImageWhereInput!]
  id: IDFilter
  mediaImages: MediaItemManyRelationFilter
  mediaGalleryImages: MediaItemManyRelationFilter
  imageName: StringFilter
  altText: StringFilter
  caption: StringFilter
}

input MediaItemManyRelationFilter {
  every: MediaItemWhereInput
  some: MediaItemWhereInput
  none: MediaItemWhereInput
}

input MediaImageOrderByInput {
  id: OrderDirection
  imageName: OrderDirection
  altText: OrderDirection
  caption: OrderDirection
}

input MediaImageUpdateInput {
  mediaImages: MediaItemRelateToManyForUpdateInput
  mediaGalleryImages: MediaItemRelateToManyForUpdateInput
  image: Upload
  imageName: String
  altText: String
  caption: String
}

input MediaItemRelateToManyForUpdateInput {
  disconnect: [MediaItemWhereUniqueInput!]
  set: [MediaItemWhereUniqueInput!]
  create: [MediaItemCreateInput!]
  connect: [MediaItemWhereUniqueInput!]
}

input MediaImageUpdateArgs {
  where: MediaImageWhereUniqueInput!
  data: MediaImageUpdateInput!
}

input MediaImageCreateInput {
  mediaImages: MediaItemRelateToManyForCreateInput
  mediaGalleryImages: MediaItemRelateToManyForCreateInput
  image: Upload
  imageName: String
  altText: String
  caption: String
}

input MediaItemRelateToManyForCreateInput {
  create: [MediaItemCreateInput!]
  connect: [MediaItemWhereUniqueInput!]
}

type StudioImage {
  id: ID!
  studioImages(
    where: StudioWhereInput! = {}
    orderBy: [StudioOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Studio!]
  studioImagesCount(where: StudioWhereInput! = {}): Int
  image: CloudinaryImage_File
  imageName: String
  altText: String
}

input StudioImageWhereUniqueInput {
  id: ID
}

input StudioImageWhereInput {
  AND: [StudioImageWhereInput!]
  OR: [StudioImageWhereInput!]
  NOT: [StudioImageWhereInput!]
  id: IDFilter
  studioImages: StudioManyRelationFilter
  imageName: StringFilter
  altText: StringFilter
}

input StudioManyRelationFilter {
  every: StudioWhereInput
  some: StudioWhereInput
  none: StudioWhereInput
}

input StudioImageOrderByInput {
  id: OrderDirection
  imageName: OrderDirection
  altText: OrderDirection
}

input StudioImageUpdateInput {
  studioImages: StudioRelateToManyForUpdateInput
  image: Upload
  imageName: String
  altText: String
}

input StudioRelateToManyForUpdateInput {
  disconnect: [StudioWhereUniqueInput!]
  set: [StudioWhereUniqueInput!]
  create: [StudioCreateInput!]
  connect: [StudioWhereUniqueInput!]
}

input StudioImageUpdateArgs {
  where: StudioImageWhereUniqueInput!
  data: StudioImageUpdateInput!
}

input StudioImageCreateInput {
  studioImages: StudioRelateToManyForCreateInput
  image: Upload
  imageName: String
  altText: String
}

input StudioRelateToManyForCreateInput {
  create: [StudioCreateInput!]
  connect: [StudioWhereUniqueInput!]
}

type MediaItem {
  id: ID!
  title: String
  key: String
  thumbnail: CloudinaryImage_File
  shortDescription: String
  filters(
    where: FilterWhereInput! = {}
    orderBy: [FilterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Filter!]
  filtersCount(where: FilterWhereInput! = {}): Int
  content: MediaItem_content_Document
  images(
    where: MediaImageWhereInput! = {}
    orderBy: [MediaImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaImage!]
  imagesCount(where: MediaImageWhereInput! = {}): Int
  galleryImages(
    where: MediaImageWhereInput! = {}
    orderBy: [MediaImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaImage!]
  galleryImagesCount(where: MediaImageWhereInput! = {}): Int
  videos: JSON
  file: AzureStorageFileFieldOutput
}

type MediaItem_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input MediaItemWhereUniqueInput {
  id: ID
  key: String
}

type AzureStorageFileFieldOutputType implements AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input MediaItemWhereInput {
  AND: [MediaItemWhereInput!]
  OR: [MediaItemWhereInput!]
  NOT: [MediaItemWhereInput!]
  id: IDFilter
  title: StringFilter
  key: StringFilter
  shortDescription: StringFilter
  filters: FilterManyRelationFilter
  images: MediaImageManyRelationFilter
  galleryImages: MediaImageManyRelationFilter
}

input FilterManyRelationFilter {
  every: FilterWhereInput
  some: FilterWhereInput
  none: FilterWhereInput
}

input MediaImageManyRelationFilter {
  every: MediaImageWhereInput
  some: MediaImageWhereInput
  none: MediaImageWhereInput
}

input MediaItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  key: OrderDirection
  shortDescription: OrderDirection
}

input MediaItemUpdateInput {
  title: String
  key: String
  thumbnail: Upload
  shortDescription: String
  filters: FilterRelateToManyForUpdateInput
  content: JSON
  images: MediaImageRelateToManyForUpdateInput
  galleryImages: MediaImageRelateToManyForUpdateInput
  videos: JSON
  file: AzureStorageFileFieldInput
}

input FilterRelateToManyForUpdateInput {
  disconnect: [FilterWhereUniqueInput!]
  set: [FilterWhereUniqueInput!]
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

input MediaImageRelateToManyForUpdateInput {
  disconnect: [MediaImageWhereUniqueInput!]
  set: [MediaImageWhereUniqueInput!]
  create: [MediaImageCreateInput!]
  connect: [MediaImageWhereUniqueInput!]
}

input AzureStorageFileFieldInput {
  upload: Upload
  ref: String
}

input MediaItemUpdateArgs {
  where: MediaItemWhereUniqueInput!
  data: MediaItemUpdateInput!
}

input MediaItemCreateInput {
  title: String
  key: String
  thumbnail: Upload
  shortDescription: String
  filters: FilterRelateToManyForCreateInput
  content: JSON
  images: MediaImageRelateToManyForCreateInput
  galleryImages: MediaImageRelateToManyForCreateInput
  videos: JSON
  file: AzureStorageFileFieldInput
}

input FilterRelateToManyForCreateInput {
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

input MediaImageRelateToManyForCreateInput {
  create: [MediaImageCreateInput!]
  connect: [MediaImageWhereUniqueInput!]
}

type Studio {
  id: ID!
  name: String
  slug: String
  content: Studio_content_Document
  photos(
    where: StudioImageWhereInput! = {}
    orderBy: [StudioImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StudioImage!]
  photosCount(where: StudioImageWhereInput! = {}): Int
  videos: JSON
}

type Studio_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input StudioWhereUniqueInput {
  id: ID
  slug: String
}

input StudioWhereInput {
  AND: [StudioWhereInput!]
  OR: [StudioWhereInput!]
  NOT: [StudioWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  photos: StudioImageManyRelationFilter
}

input StudioImageManyRelationFilter {
  every: StudioImageWhereInput
  some: StudioImageWhereInput
  none: StudioImageWhereInput
}

input StudioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input StudioUpdateInput {
  name: String
  slug: String
  content: JSON
  photos: StudioImageRelateToManyForUpdateInput
  videos: JSON
}

input StudioImageRelateToManyForUpdateInput {
  disconnect: [StudioImageWhereUniqueInput!]
  set: [StudioImageWhereUniqueInput!]
  create: [StudioImageCreateInput!]
  connect: [StudioImageWhereUniqueInput!]
}

input StudioUpdateArgs {
  where: StudioWhereUniqueInput!
  data: StudioUpdateInput!
}

input StudioCreateInput {
  name: String
  slug: String
  content: JSON
  photos: StudioImageRelateToManyForCreateInput
  videos: JSON
}

input StudioImageRelateToManyForCreateInput {
  create: [StudioImageCreateInput!]
  connect: [StudioImageWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createHomeSlide(data: HomeSlideCreateInput!): HomeSlide
  createHomeSlides(data: [HomeSlideCreateInput!]!): [HomeSlide]
  updateHomeSlide(
    where: HomeSlideWhereUniqueInput!
    data: HomeSlideUpdateInput!
  ): HomeSlide
  updateHomeSlides(data: [HomeSlideUpdateArgs!]!): [HomeSlide]
  deleteHomeSlide(where: HomeSlideWhereUniqueInput!): HomeSlide
  deleteHomeSlides(where: [HomeSlideWhereUniqueInput!]!): [HomeSlide]
  createHome(data: HomeCreateInput!): Home
  createHomePage(data: [HomeCreateInput!]!): [Home]
  updateHome(where: HomeWhereUniqueInput!, data: HomeUpdateInput!): Home
  updateHomePage(data: [HomeUpdateArgs!]!): [Home]
  deleteHome(where: HomeWhereUniqueInput!): Home
  deleteHomePage(where: [HomeWhereUniqueInput!]!): [Home]
  createFilter(data: FilterCreateInput!): Filter
  createFilters(data: [FilterCreateInput!]!): [Filter]
  updateFilter(where: FilterWhereUniqueInput!, data: FilterUpdateInput!): Filter
  updateFilters(data: [FilterUpdateArgs!]!): [Filter]
  deleteFilter(where: FilterWhereUniqueInput!): Filter
  deleteFilters(where: [FilterWhereUniqueInput!]!): [Filter]
  createMediaImage(data: MediaImageCreateInput!): MediaImage
  createMediaImages(data: [MediaImageCreateInput!]!): [MediaImage]
  updateMediaImage(
    where: MediaImageWhereUniqueInput!
    data: MediaImageUpdateInput!
  ): MediaImage
  updateMediaImages(data: [MediaImageUpdateArgs!]!): [MediaImage]
  deleteMediaImage(where: MediaImageWhereUniqueInput!): MediaImage
  deleteMediaImages(where: [MediaImageWhereUniqueInput!]!): [MediaImage]
  createStudioImage(data: StudioImageCreateInput!): StudioImage
  createStudioImages(data: [StudioImageCreateInput!]!): [StudioImage]
  updateStudioImage(
    where: StudioImageWhereUniqueInput!
    data: StudioImageUpdateInput!
  ): StudioImage
  updateStudioImages(data: [StudioImageUpdateArgs!]!): [StudioImage]
  deleteStudioImage(where: StudioImageWhereUniqueInput!): StudioImage
  deleteStudioImages(where: [StudioImageWhereUniqueInput!]!): [StudioImage]
  createMediaItem(data: MediaItemCreateInput!): MediaItem
  createMediaItems(data: [MediaItemCreateInput!]!): [MediaItem]
  updateMediaItem(
    where: MediaItemWhereUniqueInput!
    data: MediaItemUpdateInput!
  ): MediaItem
  updateMediaItems(data: [MediaItemUpdateArgs!]!): [MediaItem]
  deleteMediaItem(where: MediaItemWhereUniqueInput!): MediaItem
  deleteMediaItems(where: [MediaItemWhereUniqueInput!]!): [MediaItem]
  createStudio(data: StudioCreateInput!): Studio
  createStudios(data: [StudioCreateInput!]!): [Studio]
  updateStudio(where: StudioWhereUniqueInput!, data: StudioUpdateInput!): Studio
  updateStudios(data: [StudioUpdateArgs!]!): [Studio]
  deleteStudio(where: StudioWhereUniqueInput!): Studio
  deleteStudios(where: [StudioWhereUniqueInput!]!): [Studio]
}

type Query {
  homeSlides(
    where: HomeSlideWhereInput! = {}
    orderBy: [HomeSlideOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HomeSlide!]
  homeSlide(where: HomeSlideWhereUniqueInput!): HomeSlide
  homeSlidesCount(where: HomeSlideWhereInput! = {}): Int
  homePage(
    where: HomeWhereInput! = {}
    orderBy: [HomeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Home!]
  home(where: HomeWhereUniqueInput!): Home
  homePageCount(where: HomeWhereInput! = {}): Int
  filters(
    where: FilterWhereInput! = {}
    orderBy: [FilterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Filter!]
  filter(where: FilterWhereUniqueInput!): Filter
  filtersCount(where: FilterWhereInput! = {}): Int
  mediaImages(
    where: MediaImageWhereInput! = {}
    orderBy: [MediaImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaImage!]
  mediaImage(where: MediaImageWhereUniqueInput!): MediaImage
  mediaImagesCount(where: MediaImageWhereInput! = {}): Int
  studioImages(
    where: StudioImageWhereInput! = {}
    orderBy: [StudioImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StudioImage!]
  studioImage(where: StudioImageWhereUniqueInput!): StudioImage
  studioImagesCount(where: StudioImageWhereInput! = {}): Int
  mediaItems(
    where: MediaItemWhereInput! = {}
    orderBy: [MediaItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaItem!]
  mediaItem(where: MediaItemWhereUniqueInput!): MediaItem
  mediaItemsCount(where: MediaItemWhereInput! = {}): Int
  studios(
    where: StudioWhereInput! = {}
    orderBy: [StudioOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Studio!]
  studio(where: StudioWhereUniqueInput!): Studio
  studiosCount(where: StudioWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
