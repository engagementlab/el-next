# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type MediaItem {
  id: ID!
  title: String
  content: MediaItem_content_Document
  videos: JSON
  file: AzureStorageFileFieldOutput
}

type MediaItem_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input MediaItemWhereUniqueInput {
  id: ID
}

type AzureStorageFileFieldOutputType implements AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input MediaItemWhereInput {
  AND: [MediaItemWhereInput!]
  OR: [MediaItemWhereInput!]
  NOT: [MediaItemWhereInput!]
  id: IDFilter
  title: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MediaItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input MediaItemUpdateInput {
  title: String
  content: JSON
  videos: JSON
  file: AzureStorageFileFieldInput
}

input AzureStorageFileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input MediaItemUpdateArgs {
  where: MediaItemWhereUniqueInput!
  data: MediaItemUpdateInput!
}

input MediaItemCreateInput {
  title: String
  content: JSON
  videos: JSON
  file: AzureStorageFileFieldInput
}

type Studio {
  id: ID!
  name: String
  slug: String
  content: Studio_content_Document
  photos(
    where: StudioImageWhereInput! = {}
    orderBy: [StudioImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StudioImage!]
  photosCount(where: StudioImageWhereInput! = {}): Int
  videos: JSON
}

type Studio_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input StudioWhereUniqueInput {
  id: ID
  slug: String
}

input StudioWhereInput {
  AND: [StudioWhereInput!]
  OR: [StudioWhereInput!]
  NOT: [StudioWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  photos: StudioImageManyRelationFilter
}

input StudioImageManyRelationFilter {
  every: StudioImageWhereInput
  some: StudioImageWhereInput
  none: StudioImageWhereInput
}

input StudioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input StudioUpdateInput {
  name: String
  slug: String
  content: JSON
  photos: StudioImageRelateToManyForUpdateInput
  videos: JSON
}

input StudioImageRelateToManyForUpdateInput {
  disconnect: [StudioImageWhereUniqueInput!]
  set: [StudioImageWhereUniqueInput!]
  create: [StudioImageCreateInput!]
  connect: [StudioImageWhereUniqueInput!]
}

input StudioUpdateArgs {
  where: StudioWhereUniqueInput!
  data: StudioUpdateInput!
}

input StudioCreateInput {
  name: String
  slug: String
  content: JSON
  photos: StudioImageRelateToManyForCreateInput
  videos: JSON
}

input StudioImageRelateToManyForCreateInput {
  create: [StudioImageCreateInput!]
  connect: [StudioImageWhereUniqueInput!]
}

type StudioImage {
  id: ID!
  studioImages(
    where: StudioWhereInput! = {}
    orderBy: [StudioOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Studio!]
  studioImagesCount(where: StudioWhereInput! = {}): Int
  image: CloudinaryImage_File
  imageName: String
  altText: String
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input StudioImageWhereUniqueInput {
  id: ID
}

input StudioImageWhereInput {
  AND: [StudioImageWhereInput!]
  OR: [StudioImageWhereInput!]
  NOT: [StudioImageWhereInput!]
  id: IDFilter
  studioImages: StudioManyRelationFilter
  imageName: StringFilter
  altText: StringFilter
}

input StudioManyRelationFilter {
  every: StudioWhereInput
  some: StudioWhereInput
  none: StudioWhereInput
}

input StudioImageOrderByInput {
  id: OrderDirection
  imageName: OrderDirection
  altText: OrderDirection
}

input StudioImageUpdateInput {
  studioImages: StudioRelateToManyForUpdateInput
  image: Upload
  imageName: String
  altText: String
}

input StudioRelateToManyForUpdateInput {
  disconnect: [StudioWhereUniqueInput!]
  set: [StudioWhereUniqueInput!]
  create: [StudioCreateInput!]
  connect: [StudioWhereUniqueInput!]
}

input StudioImageUpdateArgs {
  where: StudioImageWhereUniqueInput!
  data: StudioImageUpdateInput!
}

input StudioImageCreateInput {
  studioImages: StudioRelateToManyForCreateInput
  image: Upload
  imageName: String
  altText: String
}

input StudioRelateToManyForCreateInput {
  create: [StudioCreateInput!]
  connect: [StudioWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createMediaItem(data: MediaItemCreateInput!): MediaItem
  createMediaItems(data: [MediaItemCreateInput!]!): [MediaItem]
  updateMediaItem(
    where: MediaItemWhereUniqueInput!
    data: MediaItemUpdateInput!
  ): MediaItem
  updateMediaItems(data: [MediaItemUpdateArgs!]!): [MediaItem]
  deleteMediaItem(where: MediaItemWhereUniqueInput!): MediaItem
  deleteMediaItems(where: [MediaItemWhereUniqueInput!]!): [MediaItem]
  createStudio(data: StudioCreateInput!): Studio
  createStudios(data: [StudioCreateInput!]!): [Studio]
  updateStudio(where: StudioWhereUniqueInput!, data: StudioUpdateInput!): Studio
  updateStudios(data: [StudioUpdateArgs!]!): [Studio]
  deleteStudio(where: StudioWhereUniqueInput!): Studio
  deleteStudios(where: [StudioWhereUniqueInput!]!): [Studio]
  createStudioImage(data: StudioImageCreateInput!): StudioImage
  createStudioImages(data: [StudioImageCreateInput!]!): [StudioImage]
  updateStudioImage(
    where: StudioImageWhereUniqueInput!
    data: StudioImageUpdateInput!
  ): StudioImage
  updateStudioImages(data: [StudioImageUpdateArgs!]!): [StudioImage]
  deleteStudioImage(where: StudioImageWhereUniqueInput!): StudioImage
  deleteStudioImages(where: [StudioImageWhereUniqueInput!]!): [StudioImage]
}

type Query {
  mediaItems(
    where: MediaItemWhereInput! = {}
    orderBy: [MediaItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaItem!]
  mediaItem(where: MediaItemWhereUniqueInput!): MediaItem
  mediaItemsCount(where: MediaItemWhereInput! = {}): Int
  studios(
    where: StudioWhereInput! = {}
    orderBy: [StudioOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Studio!]
  studio(where: StudioWhereUniqueInput!): Studio
  studiosCount(where: StudioWhereInput! = {}): Int
  studioImages(
    where: StudioImageWhereInput! = {}
    orderBy: [StudioImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StudioImage!]
  studioImage(where: StudioImageWhereUniqueInput!): StudioImage
  studioImagesCount(where: StudioImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
