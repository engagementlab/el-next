name: Deploy app to production
on: 
  repository_dispatch:
    types: deploy-prod
env:
  CI: true
  NODE_ENV: production
  DB_URI: ${{ secrets.DB_URI }}
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
jobs:
  initial-setup:
    name: "Initial setup"
    uses: engagementlab/el-next/.github/workflows/init.yml@main
  run-cms:
    needs: initial-setup
    name: "Run CMS, make build"
    # Do not run on automated commits (interpretation of TravisCI feature)
    if: "!contains(github.event.head_commit.message, 'skip ci') &&  github.actor != 'dependabot[bot]'"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.13.1]
    steps:
      - name: Download artifacts from initial-setup job
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('artifact-repo-{0}', github.run_id) }}

      - name: Install global packages
        run: npm install -g yarn pm2 @preconstruct/cli

      - name: Install local monorepo packages and run preconstruct
        run: yarn

      - name: Run CMS
        working-directory: apps/cms  
        env:
          AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
          AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
          DB_URI: ${{ format('{0}/{1}', secrets.DB_URI_PREFIX, github.event.client_payload.appName) }}
        run: |
          yarn add typescript @types/node yargs
          yarn
          yarn postinstall-ci --app ${{ github.event.client_payload.appName }}
          yarn build --app ${{ github.event.client_payload.appName }}
          pm2 start yarn --name "el-cms" -- dev --port 8000 --app ${{ github.event.client_payload.appName }}

      - name: Make production build
        working-directory: ${{ format('apps/{0}', github.event.client_payload.appName) }}
        env:
          APOLLO_CLIENT_GRAPHQL_URI: ${{ format('https://qa.{0}/api/graphql', github.event.client_payload.apexUrl) }}
        run: |
          yarn add typescript @types/node
          yarn
          yarn build
           
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format('artifact-build-{0}', github.run_id) }}
          retention-days: 1
          path: |
            ${{ format('apps/{0}/out', github.event.client_payload.appName) }}
            ./scripts/upload.sh
            ./scripts/commit.sh
            outputRoutes.mjs
            package.json
 
  production-publish:
    name: "Publish new build to production"
    needs: [initial-setup, run-cms]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.13.1]
    steps:
      - name: Download artifacts from production build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ format('artifact-build-{0}', github.run_id) }}

      - name: Install packages
        run: npm i -g pa11y-ci http-server pm2 && npm i
          
      - name: Serve build 
        working-directory: ./
        run: pm2 start `which http-server` --name server
      - name: Output all build paths to .pa11yci config and run pa11y
        run: |
          node outputRoutes.mjs --app ${{ github.event.client_payload.appName }}
          pa11y-ci
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy static build to Azure storage if succeeded
      - name: Deploy static build
        env:
          APP_NAME: ${{ github.event.client_payload.appName }}
          STORAGE_ACCOUNT: ${{ github.event.client_payload.storageAccount }}
        # Install azure-cli, run Bash scripts
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          chmod 777 ./scripts/upload.sh && ./scripts/upload.sh
        # chmod 777 ./scripts/commit.sh && ./scripts/commit.sh

      - name: Commit build Output
        uses: EndBug/add-and-commit@v9
        id: commit
        with:
          add: ${{ format('./apps/{0}/out', github.event.client_payload.appName) }}
          author_name: ELDevBot
          author_email: engagementlab@emerson.edu
          message: "Automated generated static production app (GH action #${{ env.GITHUB_RUN_ID }}) [skip ci]\n\n**Publishing summary from user:**\n${{ github.event.client_payload.note }}"

      - name: Generate build notes and summary from user
        if: ${{ github.event.client_payload.note != null }}
        run: |
          echo "**Publishing summary from user:**" >> $GITHUB_STEP_SUMMARY
          echo "_${{ github.event.client_payload.note }}_" >> $GITHUB_STEP_SUMMARY
          echo "(Build commit [${{ steps.commit.outputs.commit_sha }}](https://github.com/$GITHUB_REPOSITORY/commit/${{ steps.commit.outputs.commit_long_sha }}))" >> $GITHUB_STEP_SUMMARY

  notify-success:
    needs: [initial-setup, run-cms, production-publish]
    name: Send Slack notification on success
    if: ${{ success() }}
    uses: engagementlab/el-next/.github/workflows/slack.yml@main
    with:
      apexUrl: ${{ github.event.client_payload.apexUrl }}
      note: ${{ github.event.client_payload.note }}
      userName: ${{ github.event.client_payload.userName }}
      success: true
    secrets: inherit

  notify-failure:
    name: Send Slack notification on failure
    if: ${{ failure() }}
    uses: engagementlab/el-next/.github/workflows/slack.yml@main
    with:
      apexUrl: ${{ github.event.client_payload.apexUrl }}
      note: ${{ github.event.client_payload.note }}
      userName: ${{ github.event.client_payload.userName }}
      success: false
    secrets: inherit
